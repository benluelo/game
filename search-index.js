var searchIndex = JSON.parse('{\
"bounded_int":{"doc":"Leverages const generics to enforce compile time bounds …","t":[12,3,4,18,18,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12],"n":["0","BoundedInt","BoundedIntError","HIGH","LOW","TooHigh","TooLow","add","add","as_unbounded","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","deserialize","eq","eq","expand_bounds","expand_lower","expand_upper","fmt","fmt","from","from","hash","hash","into","into","iter","ne","ne","new","new_clamped","ops","partial_cmp","partial_cmp","range_from","range_from_inclusive","range_to","range_to_inclusive","saturating_add","saturating_sub","serialize","sub","sub","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","type_id","type_id","BoundedIntRange","BoundedIntRangeInclusive","borrow","borrow","borrow_mut","borrow_mut","end","end","finished","from","from","into","into","into_iter","into_iter","next","next","pointer","pointer","try_from","try_from","try_into","try_into","type_id","type_id","BoundedIntOverflowError","BoundedIntUnderflowError","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","hash","hash","into","into","ne","ne","overflowed_by","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","underflowed_by"],"q":["bounded_int","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bounded_int::iter","","","","","","","","","","","","","","","","","","","","","","","","","bounded_int::ops","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","An integer bound between two points, inclusive on both …","Error returned when trying to convert an [<code>i32</code>] to a […","The upper bounds of the <code>BoundedInt</code>, inclusive.","The lower bounds of the <code>BoundedInt</code>, inclusive.","The number was too high for the bounds.","The number was too low for the bounds.","","","Returns the inner value of the [<code>BoundedInt</code>].","","","","","","","","","","","","","","Expands the bounds of the <code>BoundedInt</code> to <code>LOWER</code> and <code>HIGHER</code>.","Increases the lower bounds of the <code>BoundedInt</code> to <code>LOWER</code>.","Raises the upper bounds of the <code>BoundedInt</code> to <code>HIGHER</code>.","","","","","","","","","Contains the [<code>Iterator</code>] implementations for the range …","","","Attempts to create a new [<code>BoundedInt</code>] with the provided …","Returns the input as a [<code>BoundedInt</code>], clamped at the …","Contains the various [<code>std::ops</code>] trait implementations for …","","","Returns a [<code>BoundedIntRange</code>] from <code>from</code> to <code>self</code>.","Returns a [<code>BoundedIntRangeInclusive</code>] from <code>from</code> to <code>self</code>.","Returns a [<code>BoundedIntRange</code>] from <code>self</code> to <code>to</code>.","Returns a [<code>BoundedIntRangeInclusive</code>] from <code>self</code> to <code>to</code>.","Performs addition that saturates at the numeric bounds …","Performs subtraction that saturates at the numeric bounds …","","","","","","","","","","","","","A range between two [<code>BoundedInt</code>]s, inclusive at the start …","A range between two [<code>BoundedInt</code>]s, inclusive on both ends.","","","","","The end of the range. This is equal to the last item that …","The end of the range. This is one higher than the last …","Whether or not the last item (<code>end</code>) has been iterated over.","","","","","","","","","Where the iterator currently is. Initially equal to the …","Where the iterator currently is. Initially equal to the …","","","","","","","Error returned when an operation would make the […","Error returned when an operation would make the […","","","","","","","","","","","","","","","","","","","","","How much the bounds were overflowed by.","","","","","","","","","How much the bounds were underflowed by."],"i":[1,0,0,1,1,2,2,1,1,1,1,2,1,2,1,2,1,2,1,2,1,1,2,1,1,1,1,2,1,2,1,2,1,2,0,1,2,1,1,0,1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,2,1,2,1,2,0,0,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,5,6,5,6,5,6,5,6,6],"f":[null,null,null,null,null,null,null,[[["u16",15]]],[[]],[[],["i32",15]],[[]],[[]],[[]],[[]],[[],["boundedint",3]],[[],["boundedinterror",4]],[[]],[[]],[[["boundedint",3]],["ordering",4]],[[["boundedinterror",4]],["ordering",4]],[[],["result",4]],[[["boundedint",3]],["bool",15]],[[["boundedinterror",4]],["bool",15]],[[],["boundedint",3]],[[],["boundedint",3]],[[],["boundedint",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["boundedint",3]],["bool",15]],[[["boundedinterror",4]],["bool",15]],[[["i32",15]],[["result",4],["boundedinterror",4]]],[[["i32",15]]],null,[[["boundedint",3]],[["option",4],["ordering",4]]],[[["boundedinterror",4]],[["option",4],["ordering",4]]],[[],["boundedintrange",3]],[[],["boundedintrangeinclusive",3]],[[],["boundedintrange",3]],[[],["boundedintrangeinclusive",3]],[[["i32",15]]],[[["i32",15]]],[[],["result",4]],[[["u16",15]]],[[]],[[]],[[]],[[],["result",4]],[[["i32",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[],["boundedintoverflowerror",3]],[[],["boundedintunderflowerror",3]],[[]],[[]],[[["boundedintoverflowerror",3]],["bool",15]],[[["boundedintunderflowerror",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["boundedintoverflowerror",3]],["bool",15]],[[["boundedintunderflowerror",3]],["bool",15]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null],"p":[[3,"BoundedInt"],[4,"BoundedIntError"],[3,"BoundedIntRangeInclusive"],[3,"BoundedIntRange"],[3,"BoundedIntOverflowError"],[3,"BoundedIntUnderflowError"]]},\
"dungeon":{"doc":"Dungeon creation. Creates 2d cave-like dungeons using …","t":[12,12,12,13,3,3,3,4,3,3,3,13,3,3,3,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,0,12,11,11,11,11,11,11,12,0,12,11,11,11,11,11,11,12,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,0,0,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,3,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,18,4,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,17,17,17,11,11,11,11,11,11,11,11,11,11,11,12,11,0,11,11,12,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,11,11,11,11,0,11,11,11,11,11,11,12,8,8,18,0,0,0,0,0,0,0,0,0,3,11,11,5,11,11,11,11,11,5,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,3,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,8,5,10,12,12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,10,10],"n":["0","0","0","Cave","Column","Connection","Dungeon","DungeonType","Floor","FloorBuilder","FloorId","Forest","Point","Point","Row","at","at_mut","border","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","column","column","connection_path","data","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","distance","distance","drop","drop","drop","drop","drop","dungeon_tile","dungeon_type","eq","eq","eq","eq","eq","equivalent","extra","floor_builder","floors","fmt","fmt","fmt","fmt","fmt","fmt","frames","from","from","from","from","from","from","height","height","id","init","init","init","init","init","into","into","into","into","into","iter_points_and_tiles","map","ne","ne","ne","ne","new","new","noise_map","partial_cmp","point","point_index","row","row","serialize","serialize","serialize","serialize","to","to_gif","to_json","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","width","width","0","Border","BorderId","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","deref","deref","deref_mut","deref_mut","drop","drop","eq","equivalent","fmt","fmt","from","from","hash","id","init","init","into","into","ne","new","partial_cmp","points","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ConnectionPath","ConnectionPathLength","Length1","Length2","Length3Plus","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","end_border_id","fmt","fmt","from","from","init","init","into","into","iter","length","path","start_border_id","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","end","end","point","points","start","start","COLOR_MAP","DungeonTile","Empty","Entrance","Exit","SecretDoor","SecretPassage","TreasureChest","Wall","as_u8","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","drop","eq","fmt","from","init","into","is_empty","is_entrance","is_exit","is_secret_door","is_secret_passage","is_solid","is_treasure_chest","is_wall","ne","serialize","to_ascii_chars","to_owned","try_from","try_into","type_id","vzip","contents","is_open","requires_key","FloorBuilder","MAX_FLOOR_SIZE","MIN_FLOOR_SIZE","RANDOM_FILL_WALL_PERCENT_CHANCE","_pretty","blank","borrow","borrow_mut","build_connections","check_for_secret_passages","create","deref","deref_mut","draw","drop","extra","finish","floor_builder_state","fmt","frame_from_current_state","frames","from","get_adjacent_walls","get_cave_borders","get_legal_neighbors","get_legal_neighbors_down_and_right","get_legal_neighbors_with_diagonals","height","id","init","inspect","into","is_out_of_bounds","is_wall","map","noise_map","place_treasure_chests","place_wall_logic","random_fill","smoothen","to_block_character","trace_connection_paths","trace_original_path","try_from","try_into","type_id","vzip","width","FloorBuilderState","Smoothable","TYPE_NAME","blank","drawable","filled","has_borders","has_connections","has_secret_connections","new","random_filled","smoothed","Blank","borrow","borrow_mut","create_billow","deref","deref_mut","drop","fmt","from","get_noise_value","init","into","try_from","try_into","type_id","vzip","Drawable","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","init","into","to_draw","try_from","try_into","type_id","vzip","Filled","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","init","into","try_from","try_into","type_id","vzip","BuildConnectionIterations","Finite","FullyConnect","HasBorders","Until","borders","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","into","into","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","HasConnections","borders","borrow","borrow_mut","connections","default","deref","deref_mut","drop","fmt","from","init","into","try_from","try_into","type_id","vzip","HasSecretPassages","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","init","into","try_from","try_into","type_id","vzip","New","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","init","into","try_from","try_into","type_id","vzip","RandomFilled","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","init","into","try_from","try_into","type_id","vzip","Smoothed","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","init","into","try_from","try_into","type_id","vzip","ToAsciiCharacter","_print_vec_2d","to_ascii_chars","0","0","Column","Point","Row","add","add","add","add","add","add_column","add_row","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","column","deref","deref","deref","deref_mut","deref_mut","deref_mut","distance","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","get","get","hash","hash","hash","init","init","init","into","into","into","ne","ne","ne","new","new","partial_cmp","partial_cmp","partial_cmp","row","saturating_add","saturating_add","saturating_add_column","saturating_add_row","saturating_sub","saturating_sub","saturating_sub_column","saturating_sub_row","sub","sub","sub","sub","sub","sub_column","sub_row","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Output","PointIndex","at","at_mut"],"q":["dungeon","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dungeon::border","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dungeon::connection_path","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dungeon::connection_path::ConnectionPathLength","","","","","","dungeon::dungeon_tile","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dungeon::dungeon_tile::DungeonTile","","","dungeon::floor_builder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dungeon::floor_builder::floor_builder_state","","","","","","","","","","","","dungeon::floor_builder::floor_builder_state::blank","","","","","","","","","","","","","","","","dungeon::floor_builder::floor_builder_state::drawable","","","","","","","","","","","","","","","dungeon::floor_builder::floor_builder_state::filled","","","","","","","","","","","","","","dungeon::floor_builder::floor_builder_state::has_borders","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dungeon::floor_builder::floor_builder_state::has_connections","","","","","","","","","","","","","","","","","dungeon::floor_builder::floor_builder_state::has_secret_connections","","","","","","","","","","","","","","dungeon::floor_builder::floor_builder_state::new","","","","","","","","","","","","","","dungeon::floor_builder::floor_builder_state::random_filled","","","","","","","","","","","","","","dungeon::floor_builder::floor_builder_state::smoothed","","","","","","","","","","","","","","dungeon::floor_builder::to_block_character","","","dungeon::point","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dungeon::point_index","","",""],"d":["","","","A cave dungeon.","Wrapper type around a [<code>BoundedInt</code>] that represents the …","A connection between two points on two different [<code>Border</code>]…","A 2D dungeon containing multiple floors of various sizes.","The different types of dungeon a [<code>Dungeon</code>] can be.","A floor of a [<code>Dungeon</code>].","Builder struct for a <code>Floor</code>.","A unique, opaque ID assigned to each floor upon creation.","A forest dungeon.","A point somewhere in a <code>Floor</code>.","A point somewhere in a <code>Floor</code>.","Wrapper type around a [<code>BoundedInt</code>] that represents the …","Returns a refrence to the tile at the specified point.","Returns a mutable reference to the tile at the specified …","A border of points around a cave in a floor.","","","","","","","","","","","","","","","","","","","","","","How many columns across the point is.","How many columns across the point is.","A connection between two borders with a path drawn …","data","","","","","","","","","","","","","","","Returns the distance between two [<code>Point</code>]s.","The distance between the two points. Convenience field so …","","","","","","The various things a tile can be in a dungeon floor.","The type of the dungeon. This only affects the way the …","","","","","","","The current state of the floor builder. May or may not …","Builder struct for a [<code>Floor</code>].","The floors of the dungeon. Will never be empty.","","","","","","","The frames of the floor builder as it is being built. …","","","","","","The start of the connection.","The height of the floor.","height","A unique, opaque ID assigned to the floor builder upon …","","","","","","","","","","","Returns an iterator over the tiles in the floor and their …","The map of tiles.","","","","","Creates a new dungeon with the specified paramaters.","Creates a new floor with the given parameters.","The map containing the noise for the floor builder, used …","","A point somewhere in a [<code>Floor</code>].","A 1-dimensional type representing a 2-dimensional grid, …","How many rows down the point is.","How many rows down the point is.","","","","","The end of the connection.","Encodes the dungeon to a gif, with each floor being a …","Returns the dungeon as JSON.","","","","","","","","","","","","","","","","","","","","","","","","","","","The width of the floor.","width","","A border of points around a cave in a floor.","A unique, opaque ID assigned to each border in a floor.","","","","","","","","","","","","","","","","","","","","","","","A unique, opaque ID assigned to each border in the floor.","","","","","","Creates a new [<code>BorderId</code>] with the given id.","","The points of the border. Stored in a [<code>HashSet</code>] for easy …","","","","","","","","","","","A connection between two borders with a path drawn …","Different lengths of paths.","Paths of length 1 only have one [<code>Point</code>]; i.e. the borders …","Paths of length 2 have a start and an end [<code>Point</code>].","All other paths have a start, an end, and 1 or more [<code>Point</code>…","","","","","","","","","","","","","","","The [<code>BorderId</code>] of the <code>Border</code> that the path ends at.","","","","","","","","","Returns an iterator over the points of the path.","Returns the length of the path.","The path itself. See the type-level docs for more …","The [<code>BorderId</code>] of the <code>Border</code> that the path starts at.","","","","","","","","","","","The end [<code>Point</code>]. This is the point in the […","The end [<code>Point</code>]. This is the point in the […","TODO: Figure out what (if anything) to write for this …","the points of the path between the start and the end, …","The start [<code>Point</code>]. This is the point in the […","The start [<code>Point</code>]. This is the point in the […","Color map for use in exporting the floor to a gif.","The various things a tile can be in a dungeon floor.","Empty space. Traversable.","Entrance to the floor. Both entrances and exits are to be …","Exit to the next floor, or the end of the dungeon. Both …","A secret door to a secret passageway. May or may not …","A secret passageway between two secret doors.","A treasure chest that will at some point contain …","Solid wall. Not traversable.","Returns the u8 value of the tile for use in exporting to …","","","","","","","","","","","","","","","Returns <code>true</code> if <code>self</code> is [<code>DungeonTile::Empty</code>].","Returns <code>true</code> if <code>self</code> is [<code>DungeonTile::Entrance</code>].","Returns <code>true</code> if <code>self</code> is [<code>DungeonTile::Exit</code>].","Returns <code>true</code> if <code>self</code> is [<code>DungeonTile::SecretDoor</code>].","Returns <code>true</code> if <code>self</code> is [<code>DungeonTile::SecretPassage</code>].","Returns whether or not the tile can be traversed by the …","Returns <code>true</code> if <code>self</code> is [<code>DungeonTile::TreasureChest</code>].","Returns <code>true</code> if <code>self</code> is [<code>DungeonTile::Wall</code>].","","","","","","","","","Placeholder for now to make refactoring easier as fields …","Whether or not the door is open. All doors start off …","Whether or not the door requires a key to open.","Builder struct for a <code>Floor</code>.","The maximum dimensions a <code>Floor</code> can have.","The minimum dimensions a <code>Floor</code> can have.","The percent chance of a wall being placed during the …","Pretty-prints the map in it’s current state. Used for …","Creates a blank [<code>FloorBuilder</code>], with all the values set …","","","Builds bridges between the disjointed caves and the …","Adds secret passages to the map between all of the …","Creates a new floor builder with the provided values.","","","Draws the current state of the [<code>FloorBuilder</code>] with the …","","The current state of the floor builder. May or may not …","Finishes the builder, returning the completed [<code>Floor</code>] and …","All the valid states a floor builder may be in. each …","","Creates a [<code>gif::Frame</code>] from the current state of the …","The frames of the floor builder as it is being built. …","","Returns how many walls there are within the rectangle …","Finds the borders around all of the caves in the […","Gets the 4 neighbours around the specified point that aren…","Gets the 2 neighbours around the specified point that aren…","Gets the 8 neighbours around the specified point that aren…","The height of the floor.","A unique, opaque ID assigned to the floor builder upon …","","Dumps the current state of the builder to stdout. for use …","","Considers the 1-wide border around the edge of the map to …","Considers out-of-bounds a wall","The map of tiles.","The map containing the noise for the floor builder, used …","Places the treasure chests on the map.","will only return wall or empty","TODO: Split this function into two parts, <code>random_fill</code> and …","Smooths out the map using cellular automata.","Represents a type that can be ‘pretty-printed’ using …","Takes the connections from […","Traces the original path through the map from the …","","","","","The width of the floor.","Marker trait for possible states for a floor builder to …","Marker trait for floor builder states that can be …","The name of the type. Used to allow for reflection (of …","A blank <code>FloorBuilder</code>, with everything set to their …","A <code>FloorBuilder</code> that has state to write to it’s internal …","A resting state for the <code>FloorBuilder</code>. It is technically …","A <code>FloorBuilder</code> that has the borders around all of the …","<code>FloorBuilder</code> state containing connections between the …","State that marks the <code>FloorBuilder</code> as having the secret …","Original state of the <code>FloorBuilder</code>. Entry point to the …","First “real” state of the builder, where the noise …","State that represents a <code>FloorBuilder</code> that has has the …","A blank floor builder, with all values in the floor map …","","","Creates a [<code>Billow</code>] using some magic numbers that have …","","","","","","Gets the noise value for the provided billow at the row …","","","","","","","A [<code>FloorBuilder</code>] that has data to be written to it’s …","","","","","","","","","","The connection paths to be drawn.","","","","","A ‘resting’ state for the floor builder. All of the …","","","","","","","","","","","","","","How many iterations there should be when generating the …","A finite amount of times, or until the caves are fully …","Until there is only 1 scc left (the caves are fully …","State that contains the borders around all of the …","Until there are at most the specified amount of sccs; …","The borders. Each border has a unique [<code>BorderId</code>] assigned …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","State that contains the borders and connections between …","The borders of the floor, indexable by their [<code>BorderId</code>].","","","The connections between the borders, mapping one [<code>Point</code>] …","","","","","","","","","","","","","State for the builder right after the secret passages …","","","","","","","","","","","","","","The initial state of the floor builder. Entry point to …","","","","","","","","","","","","","","A builder that has been filled with the original random …","","","","","","","","","","","","","","A [<code>FloorBuilder</code>] that has run the cellular automata on it…","","","","","","","","","","","","","","Represents a type that can be ‘pretty-printed’ using …","Returns the supplied [<code>Vec<T></code>] as a [<code>String</code>], using <code>T</code>’s […","Return the 2-character wide ascii representation of the …","","","Wrapper type around a [<code>BoundedInt</code>] that represents the …","A point somewhere in a <code>Floor</code>.","Wrapper type around a [<code>BoundedInt</code>] that represents the …","","","","","","Adds the provided value to the column, returning the …","Adds the provided value to the row, returning the error …","","","","","","","","","","","","","","","","How many columns across the point is.","","","","","","","Returns the euclidean distance between two points.","","","","","","","","","","","","","","","","Returns the inner value.","Returns the inner value.","","","","","","","","","","","","","Creates a new [<code>$t</code>] with the provided value.","Creates a new [<code>$t</code>] with the provided value.","","","","How many rows down the point is.","Performs addition, saturating on the bounds instead of …","Performs addition, saturating on the bounds instead of …","Adds the provided value to the column, saturating on the …","Adds the provided value to the row, saturating on the …","Performs subtraction, saturating on the bounds instead of …","Performs subtraction, saturating on the bounds instead of …","Subtracts the provided value from the column, saturating …","Subtracts the provided value from the row, saturating on …","","","","","","Subtracts the provided value from the column, returning …","Subtracts the provided value from the row, returning the …","","","","","","","","","","","","","","","","The type returned by this trait’s methods.","A 1-dimensional type representing a 2-dimensional grid, …","Returns a reference to the item at that point.","Returns a mutable reference to the item at that point."],"i":[1,2,3,4,0,0,0,0,0,0,0,4,0,0,0,5,5,0,6,7,5,3,4,6,7,5,3,4,6,7,5,3,4,6,7,5,3,4,3,8,8,0,5,6,7,5,3,4,6,7,5,3,4,7,5,3,4,0,6,6,7,5,3,4,0,7,6,7,5,3,4,3,9,0,7,6,7,5,3,3,4,9,6,7,5,3,4,6,9,5,9,6,7,5,3,4,6,7,5,3,4,5,9,6,7,5,3,7,5,9,3,0,0,8,8,7,5,3,4,6,7,7,6,7,5,3,4,3,6,7,5,3,4,6,7,5,3,4,6,7,5,3,4,6,7,5,3,4,9,5,10,0,0,11,10,11,10,11,10,11,10,10,11,10,11,10,11,10,10,10,11,10,11,10,10,11,11,10,11,10,10,10,10,11,11,10,11,10,11,10,11,10,11,10,0,0,12,12,12,13,12,13,12,13,12,13,12,13,12,13,12,13,12,13,13,12,13,12,13,12,13,12,13,13,13,13,13,12,13,12,13,12,13,12,13,12,14,15,16,15,14,15,17,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,19,19,0,0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,9,9,9,9,9,9,9,0,0,20,0,0,0,0,0,0,0,0,0,0,21,21,0,21,21,21,21,21,0,21,21,21,21,21,21,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,23,23,23,23,23,23,23,23,23,23,23,23,23,0,24,24,0,24,25,25,24,25,24,24,24,25,24,25,24,25,24,25,24,25,24,25,24,25,24,24,25,24,25,24,25,24,25,24,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,27,27,27,27,27,27,27,27,27,27,27,27,27,0,28,28,28,28,28,28,28,28,28,28,28,28,28,0,29,29,29,29,29,29,29,29,29,29,29,29,29,0,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,31,1,2,0,0,0,8,1,1,2,2,8,8,8,1,2,8,1,2,8,1,2,8,1,2,8,1,2,8,8,1,2,8,1,2,8,8,1,2,8,1,2,8,1,2,8,1,2,8,1,2,1,2,8,1,2,8,1,2,8,1,2,8,1,2,1,2,8,1,2,8,1,2,8,8,1,2,8,8,8,1,1,2,2,8,8,8,1,2,8,1,2,8,1,2,8,1,2,8,1,2,32,0,32,32],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["point",3]],["dungeontile",4]],[[["point",3]],["dungeontile",4]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["connection",3]],[[],["dungeon",3]],[[],["floor",3]],[[],["floorid",3]],[[],["dungeontype",4]],[[]],[[]],[[]],[[]],[[]],[[["floorid",3]],["ordering",4]],null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["point",3]],["f64",15]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[["connection",3]],["bool",15]],[[["dungeon",3]],["bool",15]],[[["floor",3]],["bool",15]],[[["floorid",3]],["bool",15]],[[["dungeontype",4]],["bool",15]],[[],["bool",15]],null,null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["connection",3]],["bool",15]],[[["dungeon",3]],["bool",15]],[[["floor",3]],["bool",15]],[[["floorid",3]],["bool",15]],[[["nonzerou16",3],["boundedint",3],["bool",15],["boundedint",3],["dungeontype",4]]],[[["floorid",3],["boundedint",3],["bool",15],["boundedint",3]]],null,[[["floorid",3]],[["option",4],["ordering",4]]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],[["u8",15],["vec",3]]],[[],[["result",4],["string",3],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["border",3]],[[],["borderid",3]],[[]],[[]],[[["borderid",3]],["ordering",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["borderid",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["borderid",3]],["bool",15]],[[["usize",15]]],[[["borderid",3]],[["option",4],["ordering",4]]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["connectionpath",3]],[[],["connectionpathlength",4]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["usize",15]],null,null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u8",15]],[[]],[[]],[[],["dungeontile",4]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["result",4]],[[["usize",15]]],[[["dungeontile",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["dungeontile",4]],["bool",15]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,[[],["string",3]],[[["floorid",3],["boundedint",3],["bool",15],["boundedint",3]],[["blank",3],["floorbuilder",3]]],[[]],[[]],[[["buildconnectioniterations",4]],[["hasconnections",3],["floorbuilder",3]]],[[],[["hassecretpassages",3],["floorbuilder",3]]],[[["floorid",3],["boundedint",3],["boundedint",3],["bool",15]],["floor",3]],[[["usize",15]]],[[["usize",15]]],[[],[["filled",3],["floorbuilder",3]]],[[["usize",15]]],null,[[],["floor",3]],null,[[["formatter",3]],["result",6]],[[["u16",15]]],null,[[]],[[["point",3],["i32",15]],["usize",15]],[[],[["floorbuilder",3],["hasborders",3]]],[[["point",3]]],[[["point",3]]],[[["point",3]]],null,null,[[],["usize",15]],[[]],[[]],[[["point",3]],["bool",15]],[[["point",3]],["bool",15]],null,null,[[],[["filled",3],["floorbuilder",3]]],[[["point",3],["bool",15]],["dungeontile",4]],[[],[["floorbuilder",3],["randomfilled",3]]],[[["usize",15]],[["floorbuilder",3],["smoothed",3]]],null,[[["bool",15]],[["drawable",3],["floorbuilder",3]]],[[],[["filled",3],["floorbuilder",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["billow",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[["boundedint",3],["boundedint",3],["billow",3],["boundedint",3],["boundedint",3]],["u16",15]],[[],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["buildconnectioniterations",4]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,[[]],[[]],null,[[],["hasconnections",3]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,[[["boundedint",3]],["string",3]],[[]],null,null,null,null,null,[[]],[[["u16",15]]],[[]],[[["u16",15]]],[[]],[[["u16",15]],[["result",4],["boundedintoverflowerror",3]]],[[["u16",15]],[["result",4],["boundedintoverflowerror",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["point",3]],[[],["row",3]],[[],["column",3]],[[]],[[]],[[]],[[["point",3]],["ordering",4]],[[["row",3]],["ordering",4]],[[["column",3]],["ordering",4]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["point",3]],["f64",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["point",3]],["bool",15]],[[["row",3]],["bool",15]],[[["column",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["boundedint",3]],[[],["boundedint",3]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["point",3]],["bool",15]],[[["row",3]],["bool",15]],[[["column",3]],["bool",15]],[[["boundedint",3]]],[[["boundedint",3]]],[[["point",3]],[["option",4],["ordering",4]]],[[["row",3]],[["option",4],["ordering",4]]],[[["column",3]],[["option",4],["ordering",4]]],null,[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[]],[[["u16",15]]],[[]],[[["u16",15]]],[[]],[[["u16",15]],[["boundedintunderflowerror",3],["result",4]]],[[["u16",15]],[["boundedintunderflowerror",3],["result",4]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,[[["point",3],["boundedint",3]]],[[["point",3],["boundedint",3]]]],"p":[[3,"Row"],[3,"Column"],[3,"FloorId"],[4,"DungeonType"],[3,"Floor"],[3,"Connection"],[3,"Dungeon"],[3,"Point"],[3,"FloorBuilder"],[3,"BorderId"],[3,"Border"],[4,"ConnectionPathLength"],[3,"ConnectionPath"],[13,"Length2"],[13,"Length3Plus"],[13,"Length1"],[4,"DungeonTile"],[13,"TreasureChest"],[13,"SecretDoor"],[8,"FloorBuilderState"],[3,"Blank"],[3,"Drawable"],[3,"Filled"],[4,"BuildConnectionIterations"],[3,"HasBorders"],[3,"HasConnections"],[3,"HasSecretPassages"],[3,"New"],[3,"RandomFilled"],[3,"Smoothed"],[8,"ToAsciiCharacter"],[8,"PointIndex"]]},\
"frontend":{"doc":"","t":[12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,5,0,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,0,12,5,12,12,5,5,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,12,17,17,17,17,17,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,13,13,13,3,4,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,5,5],"n":["0","Materials","Position","Tile","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","camera_player_tracking","constants","deref","deref","deref","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","drop","drop","drop","empty_material","entrance_material","exit_material","from","from","from","index","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","key_press_handling","main","player","player_material","player_movement_input_handling","secret_door_material","secret_passage_material","setup","smooth_player_movement","spawn_player_and_board","tile_type","treasure_chest_material","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","upcast","utils","vzip","vzip","vzip","wall_material","PLAYER_MOVEMENT_DELAY_SECONDS","PLAYER_MOVING_TIME_SECONDS","PLAYER_Z_INDEX","SPRITE_SIZE","TILE_Z_INDEX","0","KeyPressHandling","KeyPressTime","as_any","as_any","as_any","as_any_mut","as_any_mut","as_dyn_eq","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","clone_type_data","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","dyn_clone","dyn_eq","dyn_hash","eq","equivalent","fmt","fmt","from","from","get_hash","get_hash","hash","init","init","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","key_press_handling","system","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","vzip","vzip","Down","Left","Moving","Player","PlayerDirection","PlayerState","Right","Still","Up","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","clone_type_data","deref","deref","deref","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","drop","drop","drop","eq","fmt","fmt","from","from","from","init","init","init","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","to_owned","to_rotation","try_from","try_from","try_from","try_into","try_into","try_into","try_move_to_point","type_id","type_id","type_id","upcast","upcast","upcast","vzip","vzip","vzip","destination","timer","player_sprite_bundle","point_to_transform","tile_sprite_bundle"],"q":["frontend","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","frontend::constants","","","","","frontend::key_press_handling","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","frontend::player","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","frontend::player::PlayerState","","frontend::utils","",""],"d":["","","The internal position of something in the world; where in …","","","","","","","","","","","","","","makes the camera follow the player. TODO: when the player …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Moves the player by changing it’s internal […","","","","Moves the player between squares smoothly.","","","","","","","","","","","","","","","","","","","","","The delay, in seconds, between when the user presses an …","The amount of time, in seconds, it takes the player to …","The z-index of the player, this should be higher than most…","The size of the sprites on the screen.","The z-index of the background tiles.","","[<code>SystemLabel</code>] for [<code>key_press_handling</code>].","Contains all the keys that are currently pressed and how …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Collects all the keys that are pressed and maps them to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the respective [<code>Quat</code>] for the [<code>PlayerDirection</code>], …","","","","","","","Tries to move to the point provided, in the direction of …","","","","","","","","","","","","","",""],"i":[1,0,0,0,2,3,1,2,3,1,2,3,1,2,3,1,0,0,2,3,1,2,3,1,2,3,1,2,3,1,3,3,3,2,3,1,3,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,0,0,0,3,0,3,3,0,0,0,2,3,2,3,1,2,3,1,2,3,1,2,3,1,0,2,3,1,3,0,0,0,0,0,4,0,0,5,5,4,5,4,5,5,4,5,4,5,5,5,5,4,5,4,5,4,5,4,5,5,5,5,5,5,4,5,4,5,5,5,5,4,5,4,5,4,5,4,5,4,0,0,5,5,4,5,4,5,4,5,4,5,4,6,6,7,0,0,0,6,7,6,8,7,6,8,7,6,8,7,6,8,7,6,6,6,6,8,7,6,8,7,6,8,7,6,8,7,6,6,7,6,8,7,6,8,7,6,8,7,6,8,7,6,8,7,6,8,7,6,6,6,8,7,6,8,7,6,6,8,7,6,8,7,6,8,7,6,9,9,0,0,0],"f":[null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[["queryset",3]]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,null,[[]],[[]],[[]],[[["dungeontile",4]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["box",3],["global",3]],[["any",8],["box",3],["global",3]]],[[["box",3],["global",3]],[["any",8],["box",3],["global",3]]],[[["box",3],["global",3]],[["any",8],["box",3],["global",3]]],[[["arc",3]],[["arc",3],["any",8]]],[[["arc",3]],[["arc",3],["any",8]]],[[["arc",3]],[["arc",3],["any",8]]],[[["rc",3]],[["rc",3],["any",8]]],[[["rc",3]],[["rc",3],["any",8]]],[[["rc",3]],[["rc",3],["any",8]]],null,[[]],null,null,[[["playerstate",4],["query",3],["resmut",3],["with",3],["res",3],["position",3],["keypresstime",3],["query",3],["playerdirection",4],["dungeon",3],["query",3]]],null,null,[[["resmut",3],["assets",3],["assetserver",3],["commands",3],["res",3]]],[[["query",3],["position",3],["query",3],["playerstate",4],["transform",3],["with",3],["res",3],["query",3],["res",3],["playerdirection",4],["query",3],["dungeon",3],["time",3]]],[[["materials",3],["res",3],["commands",3],["dungeon",3],["res",3]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],null,[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["dyneq",8]],[[]],[[]],[[]],[[]],[[],["keypresshandling",3]],[[]],[[],[["box",3],["typedata",8],["global",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],[["systemlabel",8],["box",3]]],[[["dyneq",8]],["bool",15]],[[["hasher",8]]],[[["keypresshandling",3]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[["box",3],["global",3]],[["any",8],["box",3],["global",3]]],[[["box",3],["global",3]],[["any",8],["box",3],["global",3]]],[[["arc",3]],[["arc",3],["any",8]]],[[["arc",3]],[["arc",3],["any",8]]],[[["rc",3]],[["rc",3],["any",8]]],[[["rc",3]],[["rc",3],["any",8]]],[[["res",3],["keypresstime",3],["res",3],["resmut",3],["input",3],["time",3]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["option",4]],[[],["option",4]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["playerdirection",4]],[[]],[[],[["box",3],["typedata",8],["global",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["playerdirection",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["box",3],["global",3]],[["any",8],["box",3],["global",3]]],[[["box",3],["global",3]],[["any",8],["box",3],["global",3]]],[[["box",3],["global",3]],[["any",8],["box",3],["global",3]]],[[["arc",3]],[["arc",3],["any",8]]],[[["arc",3]],[["arc",3],["any",8]]],[[["arc",3]],[["arc",3],["any",8]]],[[["rc",3]],[["rc",3],["any",8]]],[[["rc",3]],[["rc",3],["any",8]]],[[["rc",3]],[["rc",3],["any",8]]],[[]],[[],["quat",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["floor",3],["point",3]],[["point",3],["option",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],null,null,[[["point",3],["floor",3],["res",3]],["spritebundle",3]],[[["floor",3],["f32",15],["point",3]],["transform",3]],[[["floor",3],["dungeontile",4],["point",3],["res",3]],["spritebundle",3]]],"p":[[3,"Position"],[3,"Tile"],[3,"Materials"],[3,"KeyPressTime"],[3,"KeyPressHandling"],[4,"PlayerDirection"],[4,"PlayerState"],[3,"Player"],[13,"Moving"]]},\
"test_bin":{"doc":"","t":[5],"n":["main"],"q":["test_bin"],"d":[""],"i":[0],"f":[[[]]],"p":[]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};